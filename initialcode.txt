async function splitDocument(document) {
    try {
      const response = await fetch(document);
      // Check if fetch request was successful
      if (!response.ok) {
        throw new Error('Network response was not ok.');
      }
      
      const text = await response.text();
      const splitter = new RecursiveCharacterTextSplitter({
        chunkSize: 250,
        chunkOverlap: 35,
      });
      const output = await splitter.createDocuments([text]);
      return output;    
    } catch (e) {
        console.error('There was an issue with splitting text');
        throw e;
    }
}

async function createAndStoreEmbeddings() {
    try {
      const chunkData = await splitDocument("movies.txt");
      const data = await Promise.all(
          chunkData.map(async (chunk) => {
              const model = genAI.getGenerativeModel({ model: "text-embedding-004"});
      
              const text = chunk.pageContent
              
              const result = await model.embedContent(text);
              const embed = result.embedding;
              console.log(embed.values)
              return {content: chunk.pageContent, embedding: embed.values}
          })
      )
      const { error } = await supabase.from('films').insert(data);
      if (error) {
        throw new Error('Issue inserting data into the database.');
      }
      console.log('SUCCESS!');
    } catch (e) {
      console.error('ERROR: ' + e.message);
      
    }
  
}
createAndStoreEmbeddings();